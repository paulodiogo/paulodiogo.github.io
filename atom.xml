<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Paulo Diogo]]></title>
  <link href="http://blog.paulodiogo.com/atom.xml" rel="self"/>
  <link href="http://blog.paulodiogo.com/"/>
  <updated>2019-11-06T13:48:34-03:00</updated>
  <id>http://blog.paulodiogo.com/</id>
  <author>
    <name><![CDATA[Paulo Diogo Rodrigues Leão de Almeida]]></name>
    <email><![CDATA[paulodiogodm@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vue slots #1]]></title>
    <link href="http://blog.paulodiogo.com/blog/2019/11/06/vue-slots-number-1/"/>
    <updated>2019-11-06T13:43:55-03:00</updated>
    <id>http://blog.paulodiogo.com/blog/2019/11/06/vue-slots-number-1</id>
    <content type="html"><![CDATA[<p>When you want to create a component that has dynamic child, that&rsquo;s a case to use the <a href="https://vuejs.org/v2/guide/components-slots.html"><code>&lt;slot&gt;</code></a> There are many other cases, but this one is beautiful.</p>

<p>I needed that the title of a <a href="https://getbootstrap.com/docs/4.3/components/card/#header-and-footer">card</a> had a dynamic text based on a certain condition, like: if the application has a context, show the label of the context.</p>

<pre><code>Vue.component("personal-title-card", {
    template: `
    &lt;div&gt;
        &lt;div class="float-left"&gt;
            &lt;slot&gt;&lt;/slot&gt;
        &lt;/div&gt;                      
        &lt;div class="float-right"&gt;
            &lt;strong&gt;&lt;/strong&gt;
        &lt;/div&gt;
    &lt;/div&gt;`,
    computed: {
        ...mapGetters(["contextLabel"])
    }
});
</code></pre>

<p>To use is as simple as that:</p>

<p><code>&lt;personal-title-card&gt;Accumsan massa elementum.&lt;/personal-title-card&gt;</code></p>

<p>According to the <a href="https://br.vuejs.org/v2/guide/components-slots.html">documentation</a>:</p>

<blockquote><p>A <code>&lt;slot&gt;</code> outlet without name implicitly has the name “default”.</p></blockquote>

<p>You can name a <a href="https://vuejs.org/v2/guide/components-slots.html#Named-Slots"><code>&lt;slot&gt;</code></a> like:</p>

<pre><code>Vue.component("personal-title-card-2", {
    template: `
    &lt;div&gt;
        &lt;div class="float-left"&gt;
            &lt;slot name="text"&gt;&lt;/slot&gt;
        &lt;/div&gt;                      
        &lt;div class="float-right"&gt;
            &lt;strong&gt;&lt;/strong&gt;
        &lt;/div&gt;
    &lt;/div&gt;`,
    computed: {
        ...mapGetters(["contextLabel"])
    }
});
</code></pre>

<p>Again, to use is as simple as that:</p>

<pre><code>&lt;personal-title-card&gt;
  &lt;template v-slot:text&gt;
    Accumsan massa elementum.
  &lt;/template&gt;
&lt;/personal-title-card&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vue components with internal data]]></title>
    <link href="http://blog.paulodiogo.com/blog/2019/11/06/vue-components-with-internal-data/"/>
    <updated>2019-11-06T13:35:26-03:00</updated>
    <id>http://blog.paulodiogo.com/blog/2019/11/06/vue-components-with-internal-data</id>
    <content type="html"><![CDATA[<p>When you write <a href="https://br.vuejs.org/v2/guide/components.html">components</a> in vue you sometimes need some internal data in each component, to handle internal behavior.</p>

<p>Like when I had a problem with formating numeric texts.</p>

<p>The component was rendered correctly, but, the first time the user entered the input the format was lost.</p>

<p>I realized that the <a href="https://br.vuejs.org/v2/guide/components-edge-cases.html#Acessando-Instancias-de-Componentes-e-Elementos-Filhos"><code>$refs</code></a> was undefined and the format function was called again only when the user typed a value and the event <code>input</code> was fired.</p>

<p>So I added a internal data that was changed when the component was <a href="https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram">mounted</a> and this behavior disappeared.</p>

<p>First add the data in the component:</p>

<pre><code>data: function () {
    return { mounted: false }
},
</code></pre>

<p>And changed the value in <code>mounted</code> method:</p>

<pre><code>mounted() {      
    this.mounted = true;
},
</code></pre>

<p>And changed my <code>computed</code> value to check the value of the data:</p>

<pre><code> computed: {
        awesomeValue: {
            get: function () {


                //HERE I CHECK THE VALUE
                if (!this.mounted) {
                    return;
                }

                //... DO THINGS TO GET VALUE

                return valor;
            },
            set: function (value) {

                //... DO THINGS TO SET VALUE

            }
        },
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O ataque do Deus ASP MVC: componentizando entranhas e espólio]]></title>
    <link href="http://blog.paulodiogo.com/blog/2015/04/07/o-ataque-do-deus-asp-mvc-componentizando-entranhas-e-espolio/"/>
    <updated>2015-04-07T22:55:17-03:00</updated>
    <id>http://blog.paulodiogo.com/blog/2015/04/07/o-ataque-do-deus-asp-mvc-componentizando-entranhas-e-espolio</id>
    <content type="html"><![CDATA[<p>O ASP MVC é realmente um Deus hoje em dia. É venerado por todos os desenvolvedores .NET e muitos de outros mundos.
Sem muitas delongas, qual o objetivo, componentizar com ASP MVC. Para muitos deve ser trivial, mas nunca tinha feito isso. Já havia feito sistemas em ASP MVC, mas não um componente. Com dezenas de possíveis clientes.
Aí está uma coisa que a Microsoft faz bem (#FanBoyDetected), componentizar e deixar a nossa vida mais tranquila, não mais fácil.</p>

<p>É muito fácil reusar em ASP MVC. No meu caso, criei uma ‘class library’ e adicionei as referências que eu iria usar (via nuget).</p>

<p>No caso de páginas, scripts, css etc, segue o rito de sempre, criar o que se quer e marcar ele como &lsquo;Embedded Resources&rsquo;.</p>

<p>Quando for criar as &lsquo;Views&rsquo;, pode ser criado no mesmo esquema das aplicações padrão:</p>

<p>$(Project)/Views/Controller/Pagina.wtv</p>

<p>Inclusive pode ser criado um arquivo Web.config na pasta &lsquo;Views&rsquo; para configurações.</p>

<p>Quanto aos outros tipos de recursos:</p>

<p>Eu estou usando o &lsquo;EmbeddedResourceVirtualPathProvider&rsquo; feito pelo @mcintyre321. Ele carrega os arquivos que estiverem em &lsquo;Embedded Resources&rsquo;.</p>

<p>Install-Package EmbeddedResourceVirtualPathProvider</p>

<p>Vai ser adicionado um arquivo &lsquo;App_Start\RegisterVirtualPathProvider.cs&rsquo;, que deve ser executado no start da aplicação, no  &lsquo;Global.asax&rsquo;.</p>

<p>Enfim, era isso aí.</p>

<p>PS. Post em construção, vou fazer um projeto de teste.</p>
]]></content>
  </entry>
  
</feed>
