<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vuejs | Paulo Diogo]]></title>
  <link href="http://blog.paulodiogo.com/blog/categories/vuejs/atom.xml" rel="self"/>
  <link href="http://blog.paulodiogo.com/"/>
  <updated>2019-11-06T19:29:46-03:00</updated>
  <id>http://blog.paulodiogo.com/</id>
  <author>
    <name><![CDATA[Paulo Diogo Rodrigues Leão]]></name>
    <email><![CDATA[opaulodiogo@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vue, Vuetify and v-model.lazy]]></title>
    <link href="http://blog.paulodiogo.com/blog/2019/11/06/vue/"/>
    <updated>2019-11-06T13:50:14-03:00</updated>
    <id>http://blog.paulodiogo.com/blog/2019/11/06/vue</id>
    <content type="html"><![CDATA[<p>In <a href="https://vuejs.org">Vue.js</a> you can use <a href="https://br.vuejs.org/v2/api/#v-model">v-model</a> to bind values in your form. That is, when you <a href="https://javascript.info/events-change-input#event-input">type</a> the value is changed on the state (input event). When you whant to wait the user get out of the control, you can use the <a href="https://vuejs.org/v2/guide/forms.html#Modifiers">modifier</a> <a href="https://vuejs.org/v2/guide/forms.html#lazy">.lazy</a>, then the event <strong><a href="https://javascript.info/events-change-input#event-change">change</a></strong> will be used instead.</p>

<p><a href="https://github.com/vuejs/vue/issues/5743">But the world is cruel</a> and when you use a custom component like <a href="https://vuetifyjs.com">Vuetifyjs</a> you need to use a <a href="https://github.com/vuetifyjs/vuetify/issues/1810">different approach</a>. You need to use <code>:value</code> and <code>@change</code> manually.</p>

<p>Example:</p>

<pre><code>
&lt;v-text-field  label="Price"
    :value="price"
    @change="value =&gt; price = value"&gt;      
&lt;/v-text-field&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vue masked input]]></title>
    <link href="http://blog.paulodiogo.com/blog/2019/11/06/vue-masked-input/"/>
    <updated>2019-11-06T13:50:00-03:00</updated>
    <id>http://blog.paulodiogo.com/blog/2019/11/06/vue-masked-input</id>
    <content type="html"><![CDATA[<p>There are many excelent <a href="https://github.com/vuejs/awesome-vue#masked-input">components</a> to get a <a href="https://en.wikipedia.org/wiki/Input_mask">masked input</a> when you are using vuejs. But, I could not find one that fill all my requisites.</p>

<p>I have use the following aproach:</p>

<p>I used the <a href="https://github.com/the-darc/string-mask">string-mask</a> component to format the values;
Write the <code>get</code> and <code>set</code> for the value of the input; and
Write one method to verify if the value typed is an number.</p>

<p>GET:</p>

<pre><code class="javascript">
    get() {
        const valuePrice = state.price;
        const formatter = new StringMask(state.maskinput, {
            reverse: true
        });
        let result = "";
        if (valuePrice !== "" &amp;&amp; valuePrice != null) {
            result = formatter.apply(valuePrice.toString().replace(/[^0-9]/g, ""));
        }
        return result;
    }
</code></pre>

<p>SET:</p>

<pre><code class="javascript">set(value) {
    const formatter = new StringMask(state.mascara, {
        reverse: true
    });

    const normalized = value.replace(/[^0-9]/g, "");

    let result = "";

    if (normalized !== "" &amp;&amp; normalized !== null) {
        result = formatter.apply(normalized);
    }

    if (result === "0" || result === "0,00") {
        result = null;
    }

    state.price = result;
}
</code></pre>

<p>Verify if is number:</p>

<pre><code class="javascript">
methods: {
    isNumber: function (evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if ((charCode &gt; 31 &amp;&amp; (charCode &lt; 48 || charCode &gt; 57)) &amp;&amp; charCode !== 46) {
            evt.preventDefault();;
        } else {
            return true;
        }
    }
},
</code></pre>

<p>To use:</p>

<pre><code class="javascript">
@keypress="isNumber($event)"
:value="valor" @input="value =&gt; valor = value"
</code></pre>

<p>We can add a default value, in my case, I cannot allow a zero value.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vue slots #1]]></title>
    <link href="http://blog.paulodiogo.com/blog/2019/11/06/vue-slots-number-1/"/>
    <updated>2019-11-06T13:43:55-03:00</updated>
    <id>http://blog.paulodiogo.com/blog/2019/11/06/vue-slots-number-1</id>
    <content type="html"><![CDATA[<p>When you want to create a component that has dynamic child, that&rsquo;s a case to use the <a href="https://vuejs.org/v2/guide/components-slots.html"><code>&lt;slot&gt;</code></a> There are many other cases, but this one is beautiful.</p>

<p>I needed that the title of a <a href="https://getbootstrap.com/docs/4.3/components/card/#header-and-footer">card</a> had a dynamic text based on a certain condition, like: if the application has a context, show the label of the context.</p>

<pre><code>Vue.component("personal-title-card", {
    template: `
    &lt;div&gt;
        &lt;div class="float-left"&gt;
            &lt;slot&gt;&lt;/slot&gt;
        &lt;/div&gt;                      
        &lt;div class="float-right"&gt;
            &lt;strong&gt;&lt;/strong&gt;
        &lt;/div&gt;
    &lt;/div&gt;`,
    computed: {
        ...mapGetters(["contextLabel"])
    }
});
</code></pre>

<p>To use is as simple as that:</p>

<p><code>&lt;personal-title-card&gt;Accumsan massa elementum.&lt;/personal-title-card&gt;</code></p>

<p>According to the <a href="https://br.vuejs.org/v2/guide/components-slots.html">documentation</a>:</p>

<blockquote><p>A <code>&lt;slot&gt;</code> outlet without name implicitly has the name “default”.</p></blockquote>

<p>You can name a <a href="https://vuejs.org/v2/guide/components-slots.html#Named-Slots"><code>&lt;slot&gt;</code></a> like:</p>

<pre><code>Vue.component("personal-title-card-2", {
    template: `
    &lt;div&gt;
        &lt;div class="float-left"&gt;
            &lt;slot name="text"&gt;&lt;/slot&gt;
        &lt;/div&gt;                      
        &lt;div class="float-right"&gt;
            &lt;strong&gt;&lt;/strong&gt;
        &lt;/div&gt;
    &lt;/div&gt;`,
    computed: {
        ...mapGetters(["contextLabel"])
    }
});
</code></pre>

<p>Again, to use is as simple as that:</p>

<pre><code>&lt;personal-title-card&gt;
  &lt;template v-slot:text&gt;
    Accumsan massa elementum.
  &lt;/template&gt;
&lt;/personal-title-card&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vue components with internal data]]></title>
    <link href="http://blog.paulodiogo.com/blog/2019/11/06/vue-components-with-internal-data/"/>
    <updated>2019-11-06T13:35:26-03:00</updated>
    <id>http://blog.paulodiogo.com/blog/2019/11/06/vue-components-with-internal-data</id>
    <content type="html"><![CDATA[<p>When you write <a href="https://br.vuejs.org/v2/guide/components.html">components</a> in vue you sometimes need some internal data in each component, to handle internal behavior.</p>

<p>Like when I had a problem with formating numeric texts.</p>

<p>The component was rendered correctly, but, the first time the user entered the input the format was lost.</p>

<p>I realized that the <a href="https://br.vuejs.org/v2/guide/components-edge-cases.html#Acessando-Instancias-de-Componentes-e-Elementos-Filhos"><code>$refs</code></a> was undefined and the format function was called again only when the user typed a value and the event <code>input</code> was fired.</p>

<p>So I added a internal data that was changed when the component was <a href="https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram">mounted</a> and this behavior disappeared.</p>

<p>First add the data in the component:</p>

<pre><code>data: function () {
    return { mounted: false }
},
</code></pre>

<p>And changed the value in <code>mounted</code> method:</p>

<pre><code>mounted() {      
    this.mounted = true;
},
</code></pre>

<p>And changed my <code>computed</code> value to check the value of the data:</p>

<pre><code> computed: {
        awesomeValue: {
            get: function () {


                //HERE I CHECK THE VALUE
                if (!this.mounted) {
                    return;
                }

                //... DO THINGS TO GET VALUE

                return valor;
            },
            set: function (value) {

                //... DO THINGS TO SET VALUE

            }
        },
</code></pre>
]]></content>
  </entry>
  
</feed>
