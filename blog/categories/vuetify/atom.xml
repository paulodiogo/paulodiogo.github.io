<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vuetify | Paulo Diogo]]></title>
  <link href="http://blog.paulodiogo.com/blog/categories/vuetify/atom.xml" rel="self"/>
  <link href="http://blog.paulodiogo.com/"/>
  <updated>2019-11-06T19:26:00-03:00</updated>
  <id>http://blog.paulodiogo.com/</id>
  <author>
    <name><![CDATA[Paulo Diogo Rodrigues LeÃ£o]]></name>
    <email><![CDATA[opaulodiogo@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vue, Vuetify and v-model.lazy]]></title>
    <link href="http://blog.paulodiogo.com/blog/2019/11/06/vue/"/>
    <updated>2019-11-06T13:50:14-03:00</updated>
    <id>http://blog.paulodiogo.com/blog/2019/11/06/vue</id>
    <content type="html"><![CDATA[<p>In <a href="https://vuejs.org">Vue.js</a> you can use <a href="https://br.vuejs.org/v2/api/#v-model">v-model</a> to bind values in your form. That is, when you <a href="https://javascript.info/events-change-input#event-input">type</a> the value is changed on the state (input event). When you whant to wait the user get out of the control, you can use the <a href="https://vuejs.org/v2/guide/forms.html#Modifiers">modifier</a> <a href="https://vuejs.org/v2/guide/forms.html#lazy">.lazy</a>, then the event <strong><a href="https://javascript.info/events-change-input#event-change">change</a></strong> will be used instead.</p>

<p><a href="https://github.com/vuejs/vue/issues/5743">But the world is cruel</a> and when you use a custom component like <a href="https://vuetifyjs.com">Vuetifyjs</a> you need to use a <a href="https://github.com/vuetifyjs/vuetify/issues/1810">different approach</a>. You need to use <code>:value</code> and <code>@change</code> manually.</p>

<p>Example:</p>

<pre><code>
&lt;v-text-field  label="Price"
    :value="price"
    @change="value =&gt; price = value"&gt;      
&lt;/v-text-field&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vue masked input]]></title>
    <link href="http://blog.paulodiogo.com/blog/2019/11/06/vue-masked-input/"/>
    <updated>2019-11-06T13:50:00-03:00</updated>
    <id>http://blog.paulodiogo.com/blog/2019/11/06/vue-masked-input</id>
    <content type="html"><![CDATA[<p>There are many excelent <a href="https://github.com/vuejs/awesome-vue#masked-input">components</a> to get a <a href="https://en.wikipedia.org/wiki/Input_mask">masked input</a> when you are using vuejs. But, I could not find one that fill all my requisites.</p>

<p>I have use the following aproach:</p>

<p>I used the <a href="https://github.com/the-darc/string-mask">string-mask</a> component to format the values;
Write the <code>get</code> and <code>set</code> for the value of the input; and
Write one method to verify if the value typed is an number.</p>

<p>GET:</p>

<pre><code class="javascript">
    get() {
        const valuePrice = state.price;
        const formatter = new StringMask(state.maskinput, {
            reverse: true
        });
        let result = "";
        if (valuePrice !== "" &amp;&amp; valuePrice != null) {
            result = formatter.apply(valuePrice.toString().replace(/[^0-9]/g, ""));
        }
        return result;
    }
</code></pre>

<p>SET:</p>

<pre><code class="javascript">set(value) {
    const formatter = new StringMask(state.mascara, {
        reverse: true
    });

    const normalized = value.replace(/[^0-9]/g, "");

    let result = "";

    if (normalized !== "" &amp;&amp; normalized !== null) {
        result = formatter.apply(normalized);
    }

    if (result === "0" || result === "0,00") {
        result = null;
    }

    state.price = result;
}
</code></pre>

<p>Verify if is number:</p>

<pre><code class="javascript">
methods: {
    isNumber: function (evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if ((charCode &gt; 31 &amp;&amp; (charCode &lt; 48 || charCode &gt; 57)) &amp;&amp; charCode !== 46) {
            evt.preventDefault();;
        } else {
            return true;
        }
    }
},
</code></pre>

<p>To use:</p>

<pre><code class="javascript">
@keypress="isNumber($event)"
:value="valor" @input="value =&gt; valor = value"
</code></pre>

<p>We can add a default value, in my case, I cannot allow a zero value.</p>
]]></content>
  </entry>
  
</feed>
